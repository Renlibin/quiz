/*
 * This file is generated by jOOQ.
*/
package cn.clubox.jooq.domain.tables;


import cn.clubox.jooq.domain.Keys;
import cn.clubox.jooq.domain.Quiz;
import cn.clubox.jooq.domain.tables.records.UserPaymentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPayment extends TableImpl<UserPaymentRecord> {

    private static final long serialVersionUID = 69674016;

    /**
     * The reference instance of <code>quiz.user_payment</code>
     */
    public static final UserPayment USER_PAYMENT = new UserPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPaymentRecord> getRecordType() {
        return UserPaymentRecord.class;
    }

    /**
     * The column <code>quiz.user_payment.id</code>.
     */
    public final TableField<UserPaymentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>quiz.user_payment.user_id</code>.
     */
    public final TableField<UserPaymentRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>quiz.user_payment.quiz_id</code>.
     */
    public final TableField<UserPaymentRecord, Integer> QUIZ_ID = createField("quiz_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>quiz.user_payment.amount</code>.
     */
    public final TableField<UserPaymentRecord, Integer> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>quiz.user_payment.stored</code>.
     */
    public final TableField<UserPaymentRecord, Timestamp> STORED = createField("stored", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>quiz.user_payment.status</code>.
     */
    public final TableField<UserPaymentRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CHAR.length(1).nullable(false), this, "");

    /**
     * Create a <code>quiz.user_payment</code> table reference
     */
    public UserPayment() {
        this("user_payment", null);
    }

    /**
     * Create an aliased <code>quiz.user_payment</code> table reference
     */
    public UserPayment(String alias) {
        this(alias, USER_PAYMENT);
    }

    private UserPayment(String alias, Table<UserPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPayment(String alias, Table<UserPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Quiz.QUIZ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserPaymentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_PAYMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserPaymentRecord> getPrimaryKey() {
        return Keys.KEY_USER_PAYMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserPaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPaymentRecord>>asList(Keys.KEY_USER_PAYMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserPaymentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserPaymentRecord, ?>>asList(Keys.FK_USER_PAYMENT_USER_USER_ID, Keys.FK_USER_PAYMENT_QUIZ_QUIZ_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPayment as(String alias) {
        return new UserPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPayment rename(String name) {
        return new UserPayment(name, null);
    }
}
